{"is_source_file": true, "format": "TypeScript", "description": "This file provides a lightweight, frontend-only audit trail system for logging user actions such as PLAY, RESET, UNDO, and ERROR within a Tic-Tac-Toe React application. It defines data types for audit entries, manages an in-memory trail, and exposes functions to add logs, retrieve the trail, and generate a session ID. The implementation emphasizes session-based in-memory logging with minimal dependencies.", "external_files": [], "external_methods": ["crypto.getRandomValues"], "published": ["AuditAction", "AuditEntry", "getSessionId", "logAction", "getAuditTrail", "clearAuditTrail"], "classes": [], "methods": [{"name": "export function getSessionId(): string { getSessionId", "description": "Returns a memoized UUID-like session ID, generating it if necessary, using crypto.randomValues when available.", "scope": "", "scopeKind": ""}, {"name": "export function logAction<TState = unknown>(entry: AuditEntry<TState>): void { logAction", "description": "Logs an audit entry by adding it to the in-memory trail, automatically appending a session ID, and outputting to console.", "scope": "", "scopeKind": ""}, {"name": "export function getAuditTrail(): AuditEntry[] { getAuditTrail", "description": "Retrieves a shallow copy of the current in-memory audit trail.", "scope": "", "scopeKind": ""}, {"name": "export function clearAuditTrail(): void { clearAuditTrail", "description": "Clears the entire audit trail, useful for testing or reset.", "scope": "", "scopeKind": ""}], "calls": ["getSessionId", "console.info"], "search-terms": ["audit trail", "user action logging", "session ID", "frontend logging", "typescript"], "state": 2, "file_id": 14, "knowledge_revision": 70, "git_revision": "64db919875c6bc0714f2a9e49e8a9fb59881faa3", "revision_history": [{"29": ""}, {"56": "64db919875c6bc0714f2a9e49e8a9fb59881faa3"}, {"70": "64db919875c6bc0714f2a9e49e8a9fb59881faa3"}], "ctags": [{"_type": "tag", "name": "AuditAction", "path": "/home/kavia/workspace/code-generation/react-tic-tac-toe-210034-210043/tic_tac_toe_frontend/src/utils/audit.ts", "pattern": "/^export type AuditAction = \"PLAY\" | \"RESET\" | \"UNDO\" | \"ERROR\";$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "AuditEntry", "path": "/home/kavia/workspace/code-generation/react-tic-tac-toe-210034-210043/tic_tac_toe_frontend/src/utils/audit.ts", "pattern": "/^export interface AuditEntry<TState = unknown> {$/", "language": "TypeScript", "kind": "interface"}, {"_type": "tag", "name": "action", "path": "/home/kavia/workspace/code-generation/react-tic-tac-toe-210034-210043/tic_tac_toe_frontend/src/utils/audit.ts", "pattern": "/^  action: AuditAction;$/", "language": "TypeScript", "kind": "property", "scope": "AuditEntry", "scopeKind": "interface"}, {"_type": "tag", "name": "after", "path": "/home/kavia/workspace/code-generation/react-tic-tac-toe-210034-210043/tic_tac_toe_frontend/src/utils/audit.ts", "pattern": "/^  after?: TState;$/", "language": "TypeScript", "kind": "property", "scope": "AuditEntry", "scopeKind": "interface"}, {"_type": "tag", "name": "b", "path": "/home/kavia/workspace/code-generation/react-tic-tac-toe-210034-210043/tic_tac_toe_frontend/src/utils/audit.ts", "pattern": "/^  const b = Array.from(bytes).map(hex);$/", "language": "TypeScript", "kind": "constant", "scope": "getSessionId", "scopeKind": "function"}, {"_type": "tag", "name": "before", "path": "/home/kavia/workspace/code-generation/react-tic-tac-toe-210034-210043/tic_tac_toe_frontend/src/utils/audit.ts", "pattern": "/^  before?: TState;$/", "language": "TypeScript", "kind": "property", "scope": "AuditEntry", "scopeKind": "interface"}, {"_type": "tag", "name": "clearAuditTrail", "path": "/home/kavia/workspace/code-generation/react-tic-tac-toe-210034-210043/tic_tac_toe_frontend/src/utils/audit.ts", "pattern": "/^export function clearAuditTrail(): void {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "getAuditTrail", "path": "/home/kavia/workspace/code-generation/react-tic-tac-toe-210034-210043/tic_tac_toe_frontend/src/utils/audit.ts", "pattern": "/^export function getAuditTrail(): AuditEntry[] {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "getSessionId", "path": "/home/kavia/workspace/code-generation/react-tic-tac-toe-210034-210043/tic_tac_toe_frontend/src/utils/audit.ts", "pattern": "/^export function getSessionId(): string {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "hex", "path": "/home/kavia/workspace/code-generation/react-tic-tac-toe-210034-210043/tic_tac_toe_frontend/src/utils/audit.ts", "pattern": "/^  const hex = (n: number) => n.toString(16).padStart(2, \"0\");$/", "language": "TypeScript", "kind": "constant", "scope": "getSessionId", "scopeKind": "function"}, {"_type": "tag", "name": "logAction", "path": "/home/kavia/workspace/code-generation/react-tic-tac-toe-210034-210043/tic_tac_toe_frontend/src/utils/audit.ts", "pattern": "/^export function logAction<TState = unknown>(entry: AuditEntry<TState>): void {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "memoSessionId", "path": "/home/kavia/workspace/code-generation/react-tic-tac-toe-210034-210043/tic_tac_toe_frontend/src/utils/audit.ts", "pattern": "/^let memoSessionId: string | null = null;$/", "language": "TypeScript", "kind": "variable"}, {"_type": "tag", "name": "message", "path": "/home/kavia/workspace/code-generation/react-tic-tac-toe-210034-210043/tic_tac_toe_frontend/src/utils/audit.ts", "pattern": "/^  message?: string; \\/\\/ for error context or informational notes$/", "language": "TypeScript", "kind": "property", "scope": "AuditEntry", "scopeKind": "interface"}, {"_type": "tag", "name": "payload", "path": "/home/kavia/workspace/code-generation/react-tic-tac-toe-210034-210043/tic_tac_toe_frontend/src/utils/audit.ts", "pattern": "/^  payload?: Record<string, unknown>;$/", "language": "TypeScript", "kind": "property", "scope": "AuditEntry", "scopeKind": "interface"}, {"_type": "tag", "name": "sessionId", "path": "/home/kavia/workspace/code-generation/react-tic-tac-toe-210034-210043/tic_tac_toe_frontend/src/utils/audit.ts", "pattern": "/^  const withSession: AuditEntry<TState> = { ...entry, sessionId: getSessionId() };$/", "language": "TypeScript", "kind": "constant", "scope": "logAction", "scopeKind": "function"}, {"_type": "tag", "name": "sessionId", "path": "/home/kavia/workspace/code-generation/react-tic-tac-toe-210034-210043/tic_tac_toe_frontend/src/utils/audit.ts", "pattern": "/^  sessionId?: string; \\/\\/ auto-populated stable id for the session$/", "language": "TypeScript", "kind": "property", "scope": "AuditEntry", "scopeKind": "interface"}, {"_type": "tag", "name": "timestamp", "path": "/home/kavia/workspace/code-generation/react-tic-tac-toe-210034-210043/tic_tac_toe_frontend/src/utils/audit.ts", "pattern": "/^  timestamp: string; \\/\\/ ISO$/", "language": "TypeScript", "kind": "property", "scope": "AuditEntry", "scopeKind": "interface"}, {"_type": "tag", "name": "trail", "path": "/home/kavia/workspace/code-generation/react-tic-tac-toe-210034-210043/tic_tac_toe_frontend/src/utils/audit.ts", "pattern": "/^const trail: AuditEntry[] = [];$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "userId", "path": "/home/kavia/workspace/code-generation/react-tic-tac-toe-210034-210043/tic_tac_toe_frontend/src/utils/audit.ts", "pattern": "/^  userId: string;$/", "language": "TypeScript", "kind": "property", "scope": "AuditEntry", "scopeKind": "interface"}, {"_type": "tag", "name": "withSession", "path": "/home/kavia/workspace/code-generation/react-tic-tac-toe-210034-210043/tic_tac_toe_frontend/src/utils/audit.ts", "pattern": "/^  const withSession: AuditEntry<TState> = { ...entry, sessionId: getSessionId() };$/", "language": "TypeScript", "kind": "constant", "scope": "logAction", "scopeKind": "function"}], "hash": "39cea5ab6555193acf9fb3b94abe8d4d", "format-version": 4, "code-base-name": "tic_tac_toe_frontend", "filename": "tic_tac_toe_frontend/src/utils/audit.ts", "fields": [{"name": "export interface AuditEntry<TState = unknown> {", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "action: AuditAction;", "scope": "AuditEntry", "scopeKind": "interface", "description": "unavailable"}, {"name": "after?: TState;", "scope": "AuditEntry", "scopeKind": "interface", "description": "unavailable"}, {"name": "before?: TState;", "scope": "AuditEntry", "scopeKind": "interface", "description": "unavailable"}, {"name": "let memoSessionId: string | null = null;", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "message?: string; \\/\\/ for error context or informational notes", "scope": "AuditEntry", "scopeKind": "interface", "description": "unavailable"}, {"name": "payload?: Record<string, unknown>;", "scope": "AuditEntry", "scopeKind": "interface", "description": "unavailable"}, {"name": "sessionId?: string; \\/\\/ auto-populated stable id for the session", "scope": "AuditEntry", "scopeKind": "interface", "description": "unavailable"}, {"name": "timestamp: string; \\/\\/ ISO", "scope": "AuditEntry", "scopeKind": "interface", "description": "unavailable"}, {"name": "userId: string;", "scope": "AuditEntry", "scopeKind": "interface", "description": "unavailable"}]}